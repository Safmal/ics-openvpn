/*
 * Copyright (c) 2012-2016 Arne Schwabe
 * Distributed under the GNU GPL v2 with additional terms. For full terms see the file doc/LICENSE.txt
 */

import com.android.builder.model.ProductFlavor

apply plugin: 'com.android.application'

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    compile 'com.android.support:support-annotations:24.0.0'
    compile 'com.android.support:cardview-v7:24.0.0'
    compile 'com.android.support:recyclerview-v7:24.0.0'
    //    compile 'ch.acra:acra:4.5.0'

    testCompile 'junit:junit:4.12'
}

android {
    compileSdkVersion 24
    buildToolsVersion '24.0.0'
    lintOptions {
        abortOnError false
    }

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 24
        versionCode = 138
        versionName = "0.6.57"
    }

    sourceSets {
        main {
            assets.srcDirs = ['src/main/assets', 'ovpnlibs/assets']
            jniLibs.srcDirs = ['ovpnlibs/jniLibs']
            jni.srcDirs = [] //disable automatic ndk-build
        }
        
        ovpn3 {
         
        }

        debug {

        }

        release {

        }
    }

    /*
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }*/

    signingConfigs {
        release
    }

    lintOptions {
        enable 'BackButton', 'EasterEgg', 'StopShip', 'IconExpectedSize', 'GradleDynamicVersion', 'NewerVersionAvailable'
        disable 'MissingTranslation'
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
    }


    productFlavors {
      //ovpn3

      normal


        modern {
            minSdkVersion 21
        }
      /*                   
      x86 {
            versionCode Integer.parseInt("6" + defaultConfig.versionCode)
            ndk {
                abiFilter "x86"
            }
        }

        mips {
            versionCode Integer.parseInt("4" + defaultConfig.versionCode)
            ndk {
                abiFilter "mips"
            }
        }

        armv7 {
            versionCode Integer.parseInt("2" + defaultConfig.versionCode)
            ndk {
               abiFilter "armeabi-v7a"
            }
        }

        arm {
            versionCode Integer.parseInt("1" + defaultConfig.versionCode)
            ndk {
                abiFilter "armeabi"
            }
        }

        fat
        */
    }


}

def requireFileInDirectory(String directory, String file) {
    if (fileTree(dir: directory, include: '**/' + file).isEmpty()) {
        throw new GradleException('Not found ' + file + ' in ' + directory + ' directory')
    }
}

def sdkCopyPkcs11() {
    if (fileTree(dir: 'libs', include: '**/' + 'librtpkcs11ecp.so').isEmpty() && !fileTree(dir: '../../../../../Libs/android/native/pkcs11/', include: 'librtpkcs11ecp.so').isEmpty()) {
        copy {
            from fileTree(dir: '../../../../../Libs/android/native/pkcs11/', include: 'librtpkcs11ecp.so')
            into 'libs/'
        }
    }
}

task extractJniDispatchFromJar {
    requireFileInDirectory('deps', 'android-arm.jar')
    FileTree tree = zipTree('deps/android-arm.jar')
    FileTree filtered = tree.matching {
        include 'libjnidispatch.so'
    }
    copy {
        from filtered
        into buildDir.getPath() + "/native-libs/"
    }

}

task prepareNativeLibs() {
    sdkCopyPkcs11()
    requireFileInDirectory('libs', 'librtpkcs11ecp.so')
    copy {
        from fileTree(dir: 'libs', include: '**/*.so')
        into buildDir.getPath() + '/native-libs/'
    }
}

task nativeLibsToJar(type: Zip, description: 'create a jar archive of the native libs', dependsOn: ['prepareNativeLibs', 'extractJniDispatchFromJar']) {
    requireFileInDirectory(buildDir.getPath() + "/native-libs", 'libjnidispatch.so')
    requireFileInDirectory(buildDir.getPath() + "/native-libs", 'librtpkcs11ecp.so')
    destinationDir file(buildDir.getPath() + "/native-libs")
    baseName 'native-libs'
    extension 'jar'
    from fileTree(dir: buildDir.getPath() + '/native-libs', include: '**/*.so')
    into 'lib/armeabi/'
}

clean {
    delete "../eclipse-project"
}

tasks.withType(JavaCompile) {
    compileTask -> compileTask.dependsOn(nativeLibsToJar)
}

/*dependencies {
    compile files("$buildDir/native-libs/native-libs.jar") {
        builtBy 'nativeLibsToJar'
    }
}*/

dependencies {
    compile fileTree(dir: "libs", include: "*.jar")
    //compile 'com.madgag.spongycastle:core:1.52.0.0'
    compile 'com.madgag.spongycastle:prov:1.52.0.0'
    compile 'com.madgag.spongycastle:pkix:1.52.0.0'
}




// ~/.gradle/gradle.properties
if (project.hasProperty('keystoreFile') &&
        project.hasProperty('keystorePassword') &&
        project.hasProperty('keystoreAliasPassword')) {
    android.signingConfigs.release.storeFile = file(keystoreFile)
    android.signingConfigs.release.storePassword = keystorePassword
    android.signingConfigs.release.keyPassword = keystoreAliasPassword
    android.signingConfigs.release.keyAlias = keystoreAlias
} else {
    android.buildTypes.release.signingConfig = null
}

/*tasks.withType(com.android.build.gradle.tasks.PackageApplication) { pkgTask ->
    pkgTask.jniFolders = new HashSet<File>()
    pkgTask.jniFolders.add(new File(buildDir, 'native-libs'))
}
*/

